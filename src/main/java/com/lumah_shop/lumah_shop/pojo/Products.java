package com.lumah_shop.lumah_shop.pojo;

import DAO.DAOCategory;
import DAO.DAOProduct;
import java.io.File;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.Part;

/**
 * Products generated by hbm2java
 */
@ManagedBean(eager = true)
@SessionScoped
public class Products implements java.io.Serializable {
    private Integer id;
    private Categories categories;
    private Integer category_id;
    private String name;
    private String description;
    private String photo;
    private String search;
    private Part photoPart;
    private File savedFile;
    private int stock;
    private int price;
    private List<Products> productList;
    private Set orderses = new HashSet(0);

    public List<Products> getFourProduct() {
        DAOProduct prod = new DAOProduct();
        return prod.showFourP();
    }

    public List<Products> getAllProduct() {
        DAOProduct prod = new DAOProduct();
        return prod.showAll();
    }

    public List<Categories> getAllCategory() {
        DAOCategory cat = new DAOCategory();
        return cat.showAll();
    }

    public void convert(int value) {
        List<Categories> list = new ArrayList<Categories>();

        Products pro = new Products();
        list = pro.getAllCategory();

        int found_at = 0;
        int loop = 0;
        for (Categories categories : list) {
            if (categories.getId().equals(value)) {
                found_at = loop;
            } else {
                loop++;
            }
        }

        // int index = list.indexOf(Integer.parseInt(submittedValue));
        System.out.println(found_at + "ini index");
        this.categories = list.get(found_at);
    }

    public void store() {
        if (photoPart != null) {
            try (InputStream input = photoPart.getInputStream()) {
                this.convert(this.category_id);
                ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
                String webContentRoot = ec.getRealPath("/");

                String filename = Paths.get(photoPart.getSubmittedFileName()).getFileName().toString();
                Date date = new Date();
                String name = String.valueOf(date.getTime()) + filename;
                savedFile = new File(webContentRoot.concat("assets/images/"), name);
                this.photo = name;

                Files.copy(input, savedFile.toPath());
                DAOProduct product = new DAOProduct();
                product.store(this);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            try {
                this.convert(this.category_id);
                this.photo = "sepatu.png";
                DAOProduct product = new DAOProduct();
                product.store(this);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }

    public String getById(int ProId) {
        DAOProduct product = new DAOProduct();
        List<Products> pro = product.Show(ProId);

        id = pro.get(0).id;
        categories = pro.get(0).categories;
        category_id = categories.getId();
        name = pro.get(0).name;
        description = pro.get(0).description;
        photo = pro.get(0).photo;
        stock = pro.get(0).stock;
        price = pro.get(0).price;

        return "product_edit";
    }

    public void search() {
        productList = search.length() > 0 ? new DAOProduct().ShowByName(search) : this.getAllProduct();
    }

    public String update() {
        this.convert(this.category_id);
        DAOProduct product = new DAOProduct();
        product.update(this);

        return "product";
    }

    public void delete(int id) {
        try {
            ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
            String webContentRoot = ec.getRealPath("/");

            Products pro = new DAOProduct().ShowP(id);
            if (pro.name.equals("sepatu.png") == false) {
                File file = new File(webContentRoot.concat("assets/images/" + pro.name));
                file.delete();
            }

            DAOProduct product = new DAOProduct();
            product.destroy(id);
        } catch (Exception e) {
            System.out.println("gagal euy kg tau napa ini" + e);
        }
    }

    public int productTotal() {
        return new DAOProduct().productTotal();
    }

    public Products() {
    }

    public Products(Categories categories, String name, int stock, int price) {
        this.category_id = category_id;
        this.name = name;
        this.stock = stock;
        this.price = price;
    }

    public Products(Categories categories, String name, String description, String photo, int stock, int price) {
        this.categories = categories;
        this.name = name;
        this.description = description;
        this.photo = photo;
        this.stock = stock;
        this.price = price;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Categories getCategories() {
        return this.categories;
    }

    public void setCategories(Categories categories) {
        this.categories = categories;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getPhoto() {
        return this.photo == null ? "sepatu.png" : this.photo;
    }

    public void setPhoto(String photo) {
        this.photo = photo;
    }

    public int getStock() {
        return this.stock;
    }

    public void setStock(int stock) {
        this.stock = stock;
    }

    public int getPrice() {
        return this.price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public Set getOrderses() {
        return this.orderses;
    }

    public void setOrderses(Set orderses) {
        this.orderses = orderses;
    }

    public Part getPhotoPart() {
        return photoPart;
    }

    public void setPhotoPart(Part photoPart) {
        this.photoPart = photoPart;
    }

    public Integer getCategory_id() {
        return category_id;
    }

    public void setCategory_id(Integer category_id) {
        this.category_id = category_id;
    }

    public String getSearch() {
        return search;
    }

    public void setSearch(String search) {
        this.search = search;
    }

    public String getDefaultPhoto(String value) {
        ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
        String webContentRoot = ec.getRealPath("/");
        File file = new File(webContentRoot.concat("assets/images/" + value));

        return file.exists() && !file.isDirectory() ? value : "sepatu.png";
    }

    public String detailProduct(int id) {
        getById(id);
        Users user = new Users().getUserData();
        return user.getEmail().equals("UserEmail@mail.com") ? "login" : "customer_product_detail";
    }

    public List<Products> getProductList() {
        return productList == null ? this.getAllProduct() : productList;
    }

    public void setProductList(List<Products> productList) {
        this.productList = productList;
    }
}